# 서비스 개요
- 주차 관제 시스템의 관리자 페이지 구성
- DaisyUI 사용
- 다국어 지원 기능 구현

# 메탈릭 하이테크 UI 스타일 가이드

목적
- 미래지향적 관리자 인터페이스 구현
- 시각적 계층 구조 강화

핵심 디자인 요소

1. 메탈릭 패턴 배경
- 배경: url(/assets/patterns/metallic.png) repeat
- 패턴 크기: background-size: 200px
- 불투명도: opacity: 0.1

2. 기본 그라데이션
- Tailwind: bg-gradient-to-br from-gray-300 via-white to-gray-200
- 금속성 표면의 기본 질감 표현

3. 테두리 처리
- border: 2px solid rgba(255,255,255,0.8)
- 깔끔한 경계선으로 고급스러운 마감 제공

4. 기본 텍스트
- color: #374151 (text-gray-700)
- font-weight: 500

5. 활성화 상태 스타일
- 그라데이션: bg-gradient-to-br from-slate-700 via-slate-600 to-slate-700
- 테두리: border-blue-300/50
- 오버레이: bg-blue-400/5
- 텍스트: text-white

구현 참고
- 주요 인터랙션 요소에만 선별적 적용
- RTL 지원 고려
- 활성화 상태는 어두운 메탈릭 + 블루 계열 조합으로 통일

# Next.js: Route Handler 우선

- 별도 백엔드 서버가 있어 기본적으로 API 구성 불필요
- 가끔 필요한 경우가 있다면 API 엔드포인트는 Route Handler를 사용하여 구현

# Next.js 라우팅: App Router

- 프로젝트 내 라우팅은 Pages Router 대신 App Router를 사용하세요.

# 프로젝트 구조: 주요 폴더 구조 예시

Project
├─app/                   # App Router & Page Layouts
│ ├─ (auth)/             # 인증 관련 라우트 그룹
│ ├─ (dashboard)/        # 대시보드 관련 라우트 그룹
│ └─ api/                # Route Handlers
│ └─ [페이지]/           # 페이지들
├─components/
│ ├─ common/             # 재사용성 높은 컴포넌트 (비즈니스 로직 관련됨)
│ ├─ ui/                 # 순수 디자인 컴포넌트 (비즈니스 로직 독립적)
│ └─ view/               # 페이지별 뷰 컴포넌트 (라우트 이후의 모든 컴포넌트)
├─public/                # 정적 파일 (빌드 대상 X, 웹 루트(/)로 접근)
│ └─locales/
├─assets/             # 빌드 대상 포함 리소스
│ ├─ icons/
│ └─ styles/             # DaisyUI 테마 설정 포함
├─data/  
│ ├─ constants/          # 상수 값
│ ├─ mocks/              # 테스트용 데이터
│ └─ static/             # 정적 데이터 파일 (JSON, CSV, XML)
├─services/              # 외부 서비스 통신
│ ├─ api/                # API 클라이언트 & 타입
│ └─ [외부서비스명]/     # 서비스별 로직
├─types/                 # 전역 타입 정의
│ └─ index.ts            # 타입 정의 파일
├─utils/                 # 순수 유틸리티 함수
├─hooks/                 # 커스텀 훅스
├─atoms.ts               # Jotai atoms
├─.env                   # 환경 변수
├─middleware.ts          # Next.js 미들웨어
└─tailwind.config.js     # DaisyUI 설정포함